//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CycleProvider.WpfApp.CalculatorServiceClient {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Calculation", Namespace="http://schemas.datacontract.org/2004/07/CycleProvider.CalculatorService")]
    [System.SerializableAttribute()]
    public partial class Calculation : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal LeftOperandField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private CycleProvider.WpfApp.CalculatorServiceClient.Operation OperationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal ResultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal RightOperandField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal LeftOperand {
            get {
                return this.LeftOperandField;
            }
            set {
                if ((this.LeftOperandField.Equals(value) != true)) {
                    this.LeftOperandField = value;
                    this.RaisePropertyChanged("LeftOperand");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public CycleProvider.WpfApp.CalculatorServiceClient.Operation Operation {
            get {
                return this.OperationField;
            }
            set {
                if ((this.OperationField.Equals(value) != true)) {
                    this.OperationField = value;
                    this.RaisePropertyChanged("Operation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Result {
            get {
                return this.ResultField;
            }
            set {
                if ((this.ResultField.Equals(value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal RightOperand {
            get {
                return this.RightOperandField;
            }
            set {
                if ((this.RightOperandField.Equals(value) != true)) {
                    this.RightOperandField = value;
                    this.RaisePropertyChanged("RightOperand");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Operation", Namespace="http://schemas.datacontract.org/2004/07/CycleProvider.CalculatorService")]
    public enum Operation : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Add = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Sub = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CalculatorServiceClient.ICalculatorService")]
    public interface ICalculatorService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculatorService/Add", ReplyAction="http://tempuri.org/ICalculatorService/AddResponse")]
        CycleProvider.WpfApp.CalculatorServiceClient.Calculation Add(decimal left, decimal right);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculatorService/Add", ReplyAction="http://tempuri.org/ICalculatorService/AddResponse")]
        System.Threading.Tasks.Task<CycleProvider.WpfApp.CalculatorServiceClient.Calculation> AddAsync(decimal left, decimal right);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculatorService/Sub", ReplyAction="http://tempuri.org/ICalculatorService/SubResponse")]
        CycleProvider.WpfApp.CalculatorServiceClient.Calculation Sub(decimal left, decimal right);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculatorService/Sub", ReplyAction="http://tempuri.org/ICalculatorService/SubResponse")]
        System.Threading.Tasks.Task<CycleProvider.WpfApp.CalculatorServiceClient.Calculation> SubAsync(decimal left, decimal right);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalculatorServiceChannel : CycleProvider.WpfApp.CalculatorServiceClient.ICalculatorService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalculatorServiceClient : System.ServiceModel.ClientBase<CycleProvider.WpfApp.CalculatorServiceClient.ICalculatorService>, CycleProvider.WpfApp.CalculatorServiceClient.ICalculatorService {
        
        public CalculatorServiceClient() {
        }
        
        public CalculatorServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalculatorServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public CycleProvider.WpfApp.CalculatorServiceClient.Calculation Add(decimal left, decimal right) {
            return base.Channel.Add(left, right);
        }
        
        public System.Threading.Tasks.Task<CycleProvider.WpfApp.CalculatorServiceClient.Calculation> AddAsync(decimal left, decimal right) {
            return base.Channel.AddAsync(left, right);
        }
        
        public CycleProvider.WpfApp.CalculatorServiceClient.Calculation Sub(decimal left, decimal right) {
            return base.Channel.Sub(left, right);
        }
        
        public System.Threading.Tasks.Task<CycleProvider.WpfApp.CalculatorServiceClient.Calculation> SubAsync(decimal left, decimal right) {
            return base.Channel.SubAsync(left, right);
        }
    }
}
